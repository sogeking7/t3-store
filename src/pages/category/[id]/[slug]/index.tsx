import {
	GetServerSideProps,
	InferGetServerSidePropsType,
	type NextPage
} from 'next'
import Head from 'next/head'
import { Header } from 'components/layout/header/header'
import { ItemGrid } from 'components/layout/item-grid/item-grid'
import { Filter } from 'components/pages/category/filter/filter'
import { useRouter } from 'next/router'
import { api } from '~/utils/api'
import { Loader } from '@mantine/core'
import { data as categories } from '~/../public/data/categories'

const CategoryPage: NextPage = ({
	categoryName
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
	const router = useRouter()
	const { from, to, rating, id } = router.query

	const { data, isLoading } = api.product.getSortedProducts.useQuery({
		from: from?.toString(),
		to: to?.toString(),
		rating: rating?.toString(),
		categoryId: +id!
	})

	return (
		<>
			<Head>
				<title>{categoryName}</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<Header />
			<main className='font-body cont-t '>
				<div className='pt-4 pb-8 flex items-center gap-2'>
					<div className='text-[32px] tracking-[-1px] leading-9 font-bold'>
						{categoryName}
					</div>
					{!isLoading && (
						<p className='text-gray-500'>{`${
							data?.products?.length || 0
						} Results`}</p>
					)}
				</div>
				<div className='flex gap-12'>
					<Filter />
					{isLoading ? (
						<div className='basis-3/4'>
							<Loader className='mx-auto' />
						</div>
					) : (// @ts-ignore comment 
						<ItemGrid data={data?.products} />
					)}
				</div>
			</main>
		</>
	)
}

export const getServerSideProps: GetServerSideProps = async ctx => {
	const query = ctx.params
	const categoryId: number = +query!.id!
	const categoryName = categories[categoryId - 1]!.name
	return { props: { categoryName } }
}

export default CategoryPage
